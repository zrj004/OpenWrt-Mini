name: OpenWrt-合集版

on: 
  workflow_dispatch:
  schedule:
    - cron: 31 00 * * *

env:
  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: OK2.config
  DIY_P1_SH: DIY-1.sh
  DIY_P2_SH: DIY-2.sh
  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:

    - name: 检查项目分支
      uses: actions/checkout@main

    - name: 清理磁盘空间
      uses: jlumbroso/free-disk-space@main
      with:
        tool-cache: true        
        android: true
        dotnet: true
        haskell: true
        large-packages: true
        swap-storage: true

    - name: 安装编译环境
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc /opt/hostedtoolcache/CodeQL
        sudo docker image prune --all --force
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libfuse-dev libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libpython3-dev libreadline-dev libssl-dev libtool lrzsz mkisofs msmtp ninja-build p7zip p7zip-full patch pkgconf python2.7 python3 python3-pyelftools python3-setuptools qemu-utils rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir

    - name: 克隆固件源码
      working-directory: /workdir
      run: |
        git clone $REPO_URL -b $REPO_BRANCH openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt

    - name: 添加外部插件
      run: |
        [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
        chmod +x $DIY_P1_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P1_SH

    - name: 更新外部插件
      run: cd openwrt && ./scripts/feeds update -a || true

    - name: 安装外部插件
      run: cd openwrt && ./scripts/feeds install -a

    - name: 加载个人设置
      run: |
        [ -e files ] && mv files openwrt/files
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
        chmod +x $DIY_P2_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P2_SH

    - name: 下载固件dL库
      run: |
        cd openwrt
        make defconfig
        make download -j8
        find dl -size -1024c -exec rm -f {} \;

    - name: 正在编译固件
      id: compile
      run: |
        cd openwrt
        make -j$(nproc) || make -j1 V=s
        echo "status=success" >> $GITHUB_OUTPUT
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=$(cat DEVICE_NAME)" >> $GITHUB_ENV || echo "DEVICE_NAME=X86_64" >> $GITHUB_ENV
        echo "FILE_DATE=$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV
        echo "FILE_TIME=$(date "+%Y年%m月%d日")" >> $GITHUB_ENV
        echo "TAG_TIME=$(date +"%Y.%m.%d-%H%M%S")" >> $GITHUB_ENV
        echo "RELEASE_NAME=OpenWrt-${DEVICE_NAME}-合集版-${FILE_DATE}" >> $GITHUB_ENV

    - name: 打包整理固件
      id: organize
      if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
        cd openwrt/bin/targets/*/*
        rm -rf packages && mkdir packages
        find -name "*esxi-flat.vmdk*" -exec mv -f {} packages \;
        find -name "*kernel.bin*" -exec mv -f {} packages \;
        find -name "*rootfs*" -exec mv -f {} packages \;
        find -name "*.manifest*" -exec mv -f {} packages \;
        find -name "*vmlinuz*" -exec mv -f {} packages \;
        find -name "*esxi.vmdk*" -exec mv -f {} packages \;
        find -name "*buildinfo*" -exec mv -f {} packages \;
        find -name "*json*" -exec mv -f {} packages \;
        find -name "*sha256sums*" -exec mv -f {} packages \;
        echo "FIRMWARE=$PWD/packages" >> $GITHUB_ENV
        echo "status=success" >> $GITHUB_OUTPUT

    - name: 打包上传固件
      uses: actions/upload-artifact@main
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: ${{ env.RELEASE_NAME }}
        path: ${{ env.FIRMWARE }}

    - name: 创建发布标签
      id: tag
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      run: |
        release_tag=${{ env.TAG_TIME }}
        echo "release_tag=$release_tag" >> $GITHUB_OUTPUT
        git config user.name "github-actions"
        git config user.email "github-actions@github.com"
        git tag $release_tag
        git push origin $release_tag
        echo "${{ env.RELEASE_NAME }}" > release.txt
        echo "默认地址：192.168.1.1" >> release.txt
        echo "默认密码：无密码" >> release.txt
        echo "插件清单：ShadowSocksR Plus+，PassWall，OpenClash" >> release.txt
        echo "status=success" >> $GITHUB_OUTPUT

    - name: 发布新版固件
      uses: softprops/action-gh-release@master
      if: steps.tag.outputs.status == 'success' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
      with:
        name: ${{ env.RELEASE_NAME }}
        tag_name: ${{ steps.tag.outputs.release_tag }}
        body_path: release.txt
        files: ${{ env.FIRMWARE }}/* 

    - name: 清理编译流程
      uses: Mattraks/delete-workflow-runs@main
      with:
        retain_days: 50
        keep_minimum_runs: 10

    - name: 删除旧版固件
      uses: dev-drprasad/delete-older-releases@master
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      with:
        keep_latest: 10
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
